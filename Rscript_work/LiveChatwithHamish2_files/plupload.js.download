(function(n, t, i)
{
function e(n)
{
function u(n, i, r)
{
var u={
chunks: "slice_blob", jpgresize: "send_binary_string", pngresize: "send_binary_string", progress: "report_upload_progress", multi_selection: "select_multiple", max_file_size: "access_binary", dragdrop: "drag_and_drop", drop_element: "drag_and_drop", headers: "send_custom_headers", canSendBinary: "send_binary", triggerDialog: "summon_file_dialog"
};
u[n] ? t[u[n]] = i : r || (t[n] = i)
}
var i=n.required_features,
t={};
return typeof i == "string" ? r.each(i.split(/\s*,\s*/), function(n)
{
u(n, !0)
}) : typeof i == "object" ? r.each(i, function(n, t)
{
u(t, n)
}) : i === !0 && (n.multipart || (t.send_binary_string = !0), n.chunk_size > 0 && (t.slice_blob = !0), n.resize.enabled && (t.send_binary_string = !0), r.each(n, function(n, t)
{
u(t, !!n, !0)
})), t
}
var u=n.setTimeout,
f={},
r={
VERSION: "2.1.0", STOPPED: 1, STARTED: 2, QUEUED: 1, UPLOADING: 2, FAILED: 4, DONE: 5, GENERIC_ERROR: -100, HTTP_ERROR: -200, IO_ERROR: -300, SECURITY_ERROR: -400, INIT_ERROR: -500, FILE_SIZE_ERROR: -600, FILE_EXTENSION_ERROR: -601, FILE_DUPLICATE_ERROR: -602, IMAGE_FORMAT_ERROR: -700, IMAGE_MEMORY_ERROR: -701, IMAGE_DIMENSIONS_ERROR: -702, mimeTypes: t.mimes, ua: t.ua, typeOf: t.typeOf, extend: t.extend, guid: t.guid, get: function(n)
{
var i=[],
r,
u;
for (t.typeOf(n) !== "array" && (n = [n]), u = n.length; u--; )
r = t.get(n[u]),
r && i.push(r);
return i.length ? i : null
}, each: t.each, getPos: t.getPos, getSize: t.getSize, xmlEncode: function(n)
{
var t={
"<": "lt", ">": "gt", "&": "amp", '"': "quot", "'": "#39"
};
return n ? ("" + n).replace(/[<>&\"\']/g, function(n)
{
return t[n] ? "&" + t[n] + ";" : n
}) : n
}, toArray: t.toArray, inArray: t.inArray, addI18n: t.addI18n, translate: function(n)
{
return ngText && ngText[n] || n
}, isEmptyObj: t.isEmptyObj, hasClass: t.hasClass, addClass: t.addClass, removeClass: t.removeClass, getStyle: t.getStyle, addEvent: t.addEvent, removeEvent: t.removeEvent, removeAllEvents: t.removeAllEvents, cleanName: function(n)
{
for (var i=[/[\300-\306]/g, "A", /[\340-\346]/g, "a", /\307/g, "C", /\347/g, "c", /[\310-\313]/g, "E", /[\350-\353]/g, "e", /[\314-\317]/g, "I", /[\354-\357]/g, "i", /\321/g, "N", /\361/g, "n", /[\322-\330]/g, "O", /[\362-\370]/g, "o", /[\331-\334]/g, "U", /[\371-\374]/g, "u"], t=0; t < i.length; t += 2)
n = n.replace(i[t], i[t + 1]);
return n = n.replace(/\s+/g, "_"), n.replace(/[^a-z0-9_\-\.]+/gi, "")
}, buildUrl: function(n, t)
{
var i="";
return r.each(t, function(n, t)
{
i += (i ? "&" : "") + encodeURIComponent(t) + "=" + encodeURIComponent(n)
}), i && (n += (n.indexOf("?") > 0 ? "&" : "?") + i), n
}, formatSize: function(n)
{
function u(n, t)
{
return Math.round(n * Math.pow(10, t)) / Math.pow(10, t)
}
if (n === i || /\D/.test(n))
return r.translate("FileUpload_NA");
var t=Math.pow(1024, 4);
return n > t ? u(n / t, 1) + " " + r.translate("FileUpload_Size_tb") : n > (t /= 1024) ? u(n / t, 1) + " " + r.translate("FileUpload_Size_gb") : n > (t /= 1024) ? u(n / t, 1) + " " + r.translate("FileUpload_Size_mb") : n > 1024 ? Math.round(n / 1024) + " " + r.translate("FileUpload_Size_kb") : n + " " + r.translate("FileUpload_Size_b")
}, parseSize: t.parseSizeStr, predictRuntime: function(n, i)
{
var u,
f;
return u = new r.Uploader(n), f = t.Runtime.thatCan(u.getOption().required_features, i || n.runtimes), u.destroy(), f
}, addFileFilter: function(n, t)
{
f[n] = t
}
};
r.addFileFilter("mime_types", function(n, t, i)
{
n.length && !n.regexp.test(t.name) ? (this.trigger("Error", {
code: r.FILE_EXTENSION_ERROR, message: r.translate("FileUpload_ExtensionError"), file: t
}), i(!1)) : i(!0)
}),
r.addFileFilter("max_file_size", function(n, t, i)
{
var u;
n = r.parseSize(n),
t.size !== u && n && t.size > n ? (this.trigger("Error", {
code: r.FILE_SIZE_ERROR, message: r.translate("FileUpload_SizeError"), file: t
}), i(!1)) : i(!0)
}),
r.addFileFilter("prevent_duplicates", function(n, t, i)
{
if (n)
for (var u=this.files.length; u--; )
if (t.name === this.files[u].name && t.size === this.files[u].size)
{
this.trigger("Error", {
code: r.FILE_DUPLICATE_ERROR, message: r.translate("FileUpload_DuplicateError"), file: t
}),
i(!1);
return
}
i(!0)
}),
r.Uploader = function(n)
{
function b()
{
var n,
i=0,
t;
if (this.state == r.STARTED)
{
for (t = 0; t < h.length; t++)
n || h[t].status != r.QUEUED ? i++ : (n = h[t], this.trigger("BeforeUpload", n) && (n.status = r.UPLOADING, this.trigger("UploadFile", n)));
i == h.length && (this.state !== r.STOPPED && (this.state = r.STOPPED, this.trigger("StateChanged")), this.trigger("UploadComplete", h))
}
}
function g(n)
{
n.percent = n.size > 0 ? Math.ceil(n.loaded / n.size * 100) : 100,
p()
}
function p()
{
var t,
n;
for (c.reset(), t = 0; t < h.length; t++)
n = h[t],
n.size !== i ? (c.size += n.origSize, c.loaded += n.loaded * n.origSize / n.size) : c.size = i,
n.status == r.DONE ? c.uploaded++ : n.status == r.FAILED ? c.failed++ : c.queued++;
c.size === i ? c.percent = h.length > 0 ? Math.ceil(c.uploaded / h.length * 100) : 0 : (c.bytesPerSec = Math.ceil(c.loaded / ((+new Date - w || 1) / 1e3)), c.percent = c.size > 0 ? Math.ceil(c.loaded / c.size * 100) : 0)
}
function k()
{
var n=l[0] || v[0];
return n ? n.getRuntime().uid : !1
}
function it(n, i)
{
if (n.ruid)
{
var r=t.Runtime.getInfo(n.ruid);
if (r)
return r.can(i)
}
return !1
}
function rt()
{
this.bind("FilesAdded", ft),
this.bind("CancelUpload", ct),
this.bind("BeforeUpload", et),
this.bind("UploadFile", ot),
this.bind("UploadProgress", st),
this.bind("StateChanged", ht),
this.bind("QueueChanged", p),
this.bind("Error", at),
this.bind("FileUploaded", lt),
this.bind("Destroy", vt)
}
function nt(n, i)
{
var u=this,
f=0,
e=[],
o={
accept: n.filters.mime_types, runtime_order: n.runtimes, required_caps: n.required_features, preferred_caps: a, swf_url: n.flash_swf_url, xap_url: n.silverlight_xap_url
};
r.each(n.runtimes.split(/\s*,\s*/), function(t)
{
n[t] && (o[t] = n[t])
}),
n.browse_button && r.each(n.browse_button, function(i)
{
e.push(function(e)
{
var s=new t.FileInput(r.extend({}, o, {
name: n.file_data_name, multiple: n.multi_selection, container: n.container, browse_button: i
}));
s.onready = function()
{
var n=t.Runtime.getInfo(this.ruid);
t.extend(u.features, {
chunks: n.can("slice_blob"), multipart: n.can("send_multipart"), multi_selection: n.can("select_multiple")
}),
f++,
l.push(this),
e()
},
s.onchange = function()
{
u.addFile(this.files)
},
s.bind("mouseenter mouseleave mousedown mouseup", function(r)
{
y || (n.browse_button_hover && ("mouseenter" === r.type ? t.addClass(i, n.browse_button_hover) : "mouseleave" === r.type && t.removeClass(i, n.browse_button_hover)), n.browse_button_active && ("mousedown" === r.type ? t.addClass(i, n.browse_button_active) : "mouseup" === r.type && t.removeClass(i, n.browse_button_active)))
}),
s.bind("error runtimeerror", function()
{
s = null,
e()
}),
s.init()
})
}),
n.drop_element && r.each(n.drop_element, function(n)
{
e.push(function(i)
{
var e=new t.FileDrop(r.extend({}, o, {drop_zone: n}));
e.onready = function()
{
var n=t.Runtime.getInfo(this.ruid);
u.features.dragdrop = n.can("drag_and_drop"),
f++,
v.push(this),
i()
},
e.ondrop = function()
{
u.addFile(this.files)
},
e.bind("error runtimeerror", function()
{
e = null,
i()
}),
e.init()
})
}),
t.inSeries(e, function()
{
typeof i == "function" && i(f)
})
}
function ut(n, i, r)
{
var u=new t.Image;
try
{
u.onload = function()
{
u.downsize(i.width, i.height, i.crop, i.preserve_headers)
},
u.onresize = function()
{
r(this.getAsBlob(n.type, i.quality)),
this.destroy()
},
u.onerror = function()
{
r(n)
},
u.load(n)
}
catch(f)
{
r(n)
}
}
function tt(n, i, u)
{
function h(n, t, i)
{
var u=o[n];
switch (n)
{
case"max_file_size":
n === "max_file_size" && (o.max_file_size = o.filters.max_file_size = t);
break;
case"chunk_size":
(t = r.parseSize(t)) && (o[n] = t);
break;
case"filters":
r.typeOf(t) === "array" && (t = {mime_types: t}),
i ? r.extend(o.filters, t) : o.filters = t,
t.mime_types && (o.filters.mime_types.regexp = function(n)
{
var t=[];
return r.each(n, function(n)
{
r.each(n.extensions.split(/,/), function(n)
{
/^\s*\*\s*$/.test(n) ? t.push("\\.*") : t.push("\\." + n.replace(new RegExp("[" + "/^$.*+?|()[]{}\\".replace(/./g, "\\$&") + "]", "g"), "\\$&"))
})
}), new RegExp("(" + t.join("|") + ")$", "i")
}(o.filters.mime_types));
break;
case"resize":
i ? r.extend(o.resize, t, {enabled: !0}) : o.resize = t;
break;
case"prevent_duplicates":
o.prevent_duplicates = o.filters.prevent_duplicates = !!t;
break;
case"browse_button":
case"drop_element":
t = r.get(t);
case"container":
case"runtimes":
case"multi_selection":
case"flash_swf_url":
case"silverlight_xap_url":
o[n] = t,
i || (s = !0);
break;
default:
o[n] = t
}
i || f.trigger("OptionChanged", n, t, u)
}
var f=this,
s=!1;
typeof n == "object" ? r.each(n, function(n, t)
{
h(t, n, u)
}) : h(n, i, u),
u ? (o.required_features = e(r.extend({}, o)), a = e(r.extend({}, o, {required_features: !0}))) : s && (f.trigger("Destroy"), nt.call(f, o, function(n)
{
n ? (f.runtime = t.Runtime.getInfo(k()).type, f.trigger("Init", {runtime: f.runtime}), f.trigger("PostInit")) : f.trigger("Error", {
code: r.INIT_ERROR, message: r.translate("FileUpload_InitError")
})
}))
}
function ft(n, t)
{
[].push.apply(h, t),
n.trigger("QueueChanged"),
n.refresh()
}
function et(n, t)
{
if (o.unique_names)
{
var i=t.name.match(/\.([^.]+)$/),
r="part";
i && (r = i[1]),
t.target_name = t.id + "." + r
}
}
function ot(n, i)
{
function y()
{
v-- > 0 ? u(h, 1e3) : (i.loaded = e, n.trigger("Error", {
code: r.HTTP_ERROR, message: r.translate("FileUpload_HttpError"), file: i, response: s.responseText, status: s.status, responseHeaders: s.getAllResponseHeaders()
}))
}
function h()
{
var w,
b,
p,
k;
i.status != r.DONE && i.status != r.FAILED && n.state != r.STOPPED && (p = {name: i.target_name || i.name}, o && l.chunks && f.size > o ? (k = Math.min(o, f.size - e), w = f.slice(e, e + k)) : (k = f.size, w = f), o && l.chunks && (n.settings.send_chunk_number ? (p.chunk = Math.ceil(e / o), p.chunks = Math.ceil(f.size / o)) : (p.offset = e, p.total = f.size)), s = new t.XMLHttpRequest, s.upload && (s.upload.onprogress = function(t)
{
i.loaded = Math.min(i.size, e + t.loaded),
n.trigger("UploadProgress", i)
}), s.onload = function()
{
if (s.status >= 400)
{
y();
return
}
v = n.settings.max_retries,
k < f.size ? (w.destroy(), e += k, i.loaded = Math.min(e, f.size), n.trigger("ChunkUploaded", i, {
offset: i.loaded, total: f.size, response: s.responseText, status: s.status, responseHeaders: s.getAllResponseHeaders()
}), t.Env.browser === "Android Browser" && n.trigger("UploadProgress", i)) : i.loaded = i.size,
w = b = null,
!e || e >= f.size ? (i.size != i.origSize && (f.destroy(), f = null), n.trigger("UploadProgress", i), i.status = r.DONE, n.trigger("FileUploaded", i, {
response: s.responseText, status: s.status, responseHeaders: s.getAllResponseHeaders()
})) : u(h, 1)
}, s.onerror = function()
{
y()
}, s.onloadend = function()
{
this.destroy(),
s = null
}, n.settings.multipart && l.multipart ? (p.name = i.target_name || i.name, s.open("post", c, !0), r.each(n.settings.headers, function(n, t)
{
s.setRequestHeader(t, n)
}), b = new t.FormData, r.each(r.extend(p, n.settings.multipart_params), function(n, t)
{
b.append(t, n)
}), b.append(n.settings.file_data_name, w), s.send(b, {
runtime_order: n.settings.runtimes, required_caps: n.settings.required_features, preferred_caps: a, swf_url: n.settings.flash_swf_url, xap_url: n.settings.silverlight_xap_url
})) : (c = r.buildUrl(n.settings.url, r.extend(p, n.settings.multipart_params)), s.open("post", c, !0), s.setRequestHeader("Content-Type", "application/octet-stream"), r.each(n.settings.headers, function(n, t)
{
s.setRequestHeader(t, n)
}), s.send(w, {
runtime_order: n.settings.runtimes, required_caps: n.settings.required_features, preferred_caps: a, swf_url: n.settings.flash_swf_url, xap_url: n.settings.silverlight_xap_url
})))
}
var c=n.settings.url,
o=n.settings.chunk_size,
v=n.settings.max_retries,
l=n.features,
e=0,
f;
i.loaded && (e = i.loaded = o * Math.floor(i.loaded / o)),
f = i.getSource(),
n.settings.resize.enabled && it(f, "send_binary_string") && !!~t.inArray(f.type, ["image/jpeg", "image/png"]) ? ut.call(this, f, n.settings.resize, function(n)
{
f = n,
i.size = n.size,
h()
}) : h()
}
function st(n, t)
{
g(t)
}
function ht(n)
{
if (n.state == r.STARTED)
w = +new Date;
else if (n.state == r.STOPPED)
for (var t=n.files.length - 1; t >= 0; t--)
n.files[t].status == r.UPLOADING && (n.files[t].status = r.QUEUED, p())
}
function ct()
{
s && s.abort()
}
function lt(n)
{
p(),
u(function()
{
b.call(n)
}, 1)
}
function at(n, t)
{
t.file && (t.file.status = r.FAILED, g(t.file), n.state == r.STARTED && (n.trigger("CancelUpload"), u(function()
{
b.call(n)
}, 1)))
}
function vt(n)
{
n.stop(),
r.each(h, function(n)
{
n.destroy()
}),
h = [],
l.length && (r.each(l, function(n)
{
n.destroy()
}), l = []),
v.length && (r.each(v, function(n)
{
n.destroy()
}), v = []),
a = {},
y = !1,
o = w = s = null,
c.reset()
}
var d=r.guid(),
o,
h=[],
a={},
l=[],
v=[],
w,
c,
y=!1,
s;
o = {
runtimes: t.Runtime.order, max_retries: 0, chunk_size: 0, multipart: !0, multi_selection: !0, file_data_name: "file", flash_swf_url: "js/Moxie.swf", silverlight_xap_url: "js/Moxie.xap", filters: {
mime_types: [], prevent_duplicates: !1, max_file_size: 0
}, resize: {
enabled: !1, preserve_headers: !0, crop: !1
}, send_chunk_number: !0
},
tt.call(this, n, null, !0),
c = new r.QueueProgress,
r.extend(this, {
id: d, uid: d, state: r.STOPPED, features: {}, runtime: null, files: h, settings: o, total: c, init: function()
{
var n=this;
if (typeof o.preinit == "function" ? o.preinit(n) : r.each(o.preinit, function(t, i)
{
n.bind(i, t)
}), !o.browse_button || !o.url)
{
this.trigger("Error", {
code: r.INIT_ERROR, message: r.translate("FileUpload_InitError")
});
return
}
rt.call(this),
nt.call(this, o, function(i)
{
typeof o.init == "function" ? o.init(n) : r.each(o.init, function(t, i)
{
n.bind(i, t)
}),
i ? (n.runtime = t.Runtime.getInfo(k()).type, n.trigger("Init", {runtime: n.runtime}), n.trigger("PostInit")) : n.trigger("Error", {
code: r.INIT_ERROR, message: r.translate("FileUpload_InitError")
})
})
}, setOption: function(n, t)
{
tt.call(this, n, t, !this.runtime)
}, getOption: function(n)
{
return n ? o[n] : o
}, refresh: function()
{
l.length && r.each(l, function(n)
{
n.trigger("Refresh")
}),
this.trigger("Refresh")
}, start: function()
{
this.state != r.STARTED && (this.state = r.STARTED, this.trigger("StateChanged"), b.call(this))
}, stop: function()
{
this.state != r.STOPPED && (this.state = r.STOPPED, this.trigger("StateChanged"), this.trigger("CancelUpload"))
}, disableBrowse: function()
{
y = arguments[0] !== i ? arguments[0] : !0,
l.length && r.each(l, function(n)
{
n.disable(y)
}),
this.trigger("DisableBrowse", y)
}, getFile: function(n)
{
for (var t=h.length - 1; t >= 0; t--)
if (h[t].id === n)
return h[t]
}, addFile: function(n, i)
{
function l(n, i)
{
var r=[];
t.each(o.settings.filters, function(t, i)
{
f[i] && r.push(function(r)
{
f[i].call(o, t, n, function(n)
{
r(!n)
})
})
}),
t.inSeries(r, i)
}
function e(n)
{
var f=t.typeOf(n);
if (n instanceof t.File)
{
if (!n.ruid && !n.isDetached())
{
if (!s)
return !1;
n.ruid = s,
n.connectRuntime(s)
}
e(new r.File(n))
}
else
n instanceof t.Blob ? (e(n.getSource()), n.destroy()) : n instanceof r.File ? (i && (n.name = i), h.push(function(t)
{
l(n, function(i)
{
i || (c.push(n), o.trigger("FileFiltered", n)),
u(t, 1)
})
})) : t.inArray(f, ["file", "blob"]) !== -1 ? e(new t.File(null, n)) : f === "node" && t.typeOf(n.files) === "filelist" ? t.each(n.files, e) : f === "array" && (i = null, t.each(n, e))
}
var o=this,
h=[],
c=[],
s;
s = k(),
e(n),
h.length && t.inSeries(h, function()
{
c.length && o.trigger("FilesAdded", c)
})
}, removeFile: function(n)
{
for (var i=typeof n == "string" ? n : n.id, t=h.length - 1; t >= 0; t--)
if (h[t].id === i)
return this.splice(t, 1)[0]
}, splice: function(n, t)
{
var u=h.splice(n === i ? 0 : n, t === i ? h.length : t),
f=!1;
return this.state == r.STARTED && (f = !0, this.stop()), this.trigger("FilesRemoved", u), r.each(u, function(n)
{
n.destroy()
}), this.trigger("QueueChanged"), this.refresh(), f && this.start(), u
}, bind: function(n, t, i)
{
var u=this;
r.Uploader.prototype.bind.call(this, n, function()
{
var n=[].slice.call(arguments);
return n.splice(0, 1, u), t.apply(this, n)
}, 0, i)
}, destroy: function()
{
this.trigger("Destroy"),
c = null,
this.unbindAll()
}
})
},
r.Uploader.prototype = t.EventTarget.instance,
r.File = function()
{
function i(i)
{
r.extend(this, {
id: r.guid(), name: i.name || i.fileName, type: i.type || "", size: i.size || i.fileSize, origSize: i.size || i.fileSize, loaded: 0, percent: 0, status: r.QUEUED, lastModifiedDate: i.lastModifiedDate || (new Date).toLocaleString(), getNative: function()
{
var n=this.getSource().getSource();
return t.inArray(t.typeOf(n), ["blob", "file"]) !== -1 ? n : null
}, getSource: function()
{
return n[this.id] ? n[this.id] : null
}, destroy: function()
{
var t=this.getSource();
t && (t.destroy(), delete n[this.id])
}
}),
n[this.id] = i
}
var n={};
return i
}(),
r.QueueProgress = function()
{
var n=this;
n.size = 0,
n.loaded = 0,
n.uploaded = 0,
n.failed = 0,
n.queued = 0,
n.percent = 0,
n.bytesPerSec = 0,
n.reset = function()
{
n.size = n.loaded = n.uploaded = n.failed = n.queued = n.percent = n.bytesPerSec = 0
}
},
n.plupload = r
})(window, mOxie);