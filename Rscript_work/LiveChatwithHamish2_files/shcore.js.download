if (typeof SyntaxHighlighter == "undefined")
var SyntaxHighlighter=function()
{
function w(n, t)
{
return n.className.indexOf(t) != -1
}
function b(n, t)
{
w(n, t) || (n.className += " " + t)
}
function c(n, t)
{
n.className = n.className.replace(t, "")
}
function l(n)
{
for (var i=[], t=0; t < n.length; t++)
i.push(n[t]);
return i
}
function t(n)
{
return n.split(/\r?\n/)
}
function r(n)
{
var t="highlighter_";
return n.indexOf(t) == 0 ? n : t + n
}
function a(t)
{
return n.vars.highlighters[r(t)]
}
function k(n)
{
return document.getElementById(r(n))
}
function d(t)
{
n.vars.highlighters[r(t.id)] = t
}
function i(n, t, r)
{
var u,
e,
s,
o,
f;
if (n == null)
return null;
if (u = r != !0 ? n.childNodes : [n.parentNode], e = {
"#": "id", ".": "className"
}[t.substr(0, 1)] || "nodeName", s = e != "nodeName" ? t.substr(1) : t.toUpperCase(), (n[e] || "").indexOf(s) != -1)
return n;
for (f = 0; u && f < u.length && o == null; f++)
o = i(u[f], t, r);
return o
}
function o(n, t)
{
return i(n, t, !0)
}
function g(n, t, i)
{
i = Math.max(i || 0, 0);
for (var r=i; r < n.length; r++)
if (n[r] == t)
return r;
return -1
}
function nt(n)
{
return (n || "") + Math.round(Math.random() * 1e6).toString()
}
function v(n, t)
{
var r={},
i;
for (i in n)
r[i] = n[i];
for (i in t)
r[i] = t[i];
return r
}
function tt(n)
{
var t={
"true": !0, "false": !1
}[n];
return t == null ? n : t
}
function it(n, t, i, r, u)
{
var e=(screen.width - i) / 2,
o=(screen.height - r) / 2,
f;
return u += ", left=" + e + ", top=" + o + ", width=" + i + ", height=" + r, u = u.replace(/^,/, ""), f = window.open(n, t, u), f.focus(), f
}
function u(n, t, i, r)
{
function u(n)
{
n = n || window.event,
n.target || (n.target = n.srcElement, n.preventDefault = function()
{
this.returnValue = !1
}),
i.call(r || window, n)
}
n.attachEvent ? n.attachEvent("on" + t, u) : n.addEventListener(t, u, !1)
}
function y(t)
{
window.alert(n.config.strings.alert + t)
}
function p(t, i)
{
var r=n.vars.discoveredBrushes,
o=null,
u,
s,
f,
e;
if (r == null)
{
r = {};
for (u in n.brushes)
if (s = n.brushes[u], f = s.aliases, f != null)
for (s.brushName = u.toLowerCase(), e = 0; e < f.length; e++)
r[f[e]] = u;
n.vars.discoveredBrushes = r
}
return o = n.brushes[r[t]], o == null && i && y(n.config.strings.noBrush + t), o
}
function s(n, i)
{
for (var u=t(n), r=0; r < u.length; r++)
u[r] = i(u[r], r);
return u.join("\r\n")
}
function rt(n)
{
return n.replace(/^[ ]*[\n]+|[\n]*[ ]*$/g, "")
}
function ut(n)
{
for (var i, u={}, f=XRegExp("^\\[(?<values>(.*?))\\]$"), e=0, o=XRegExp("(?<name>[\\w-]+)\\s*:\\s*(?<value>[\\w%#-]+|\\[.*?\\]|\".*?\"|'.*?')\\s*;?", "g"), t, r; (i = XRegExp.exec(n, o, e)) != null; )
t = i.value.replace(/^['"]|['"]$/g, ""),
t != null && f.test(t) && (r = XRegExp.exec(t, f), t = r.values.length > 0 ? r.values.split(/\s*,\s*/) : []),
u[i.name] = t,
e = i.index + i[0].length;
return u
}
function h(t, i)
{
return t == null || t.length == 0 || t == "\n" ? t : (t = t.replace(/</g, "&lt;"), t = t.replace(/ {2,}/g, function(t)
{
for (var r="", i=0; i < t.length - 1; i++)
r += n.config.space;
return r + " "
}), i != null && (t = s(t, function(n)
{
if (n.length == 0)
return "";
var t="";
return (n = n.replace(/^(&nbsp;| )+/, function(n)
{
return t = n, ""
}), n.length == 0) ? t : t + '<code class="' + i + '">' + n + "<\/code>"
})), t)
}
function ft(n, t)
{
for (var i=n.toString(); i.length < t; )
i = "0" + i;
return i
}
function et(n, t)
{
for (var r="", i=0; i < t; i++)
r += " ";
return n.replace(/\t/g, r)
}
function ot(n, i)
{
function e(n, t, i)
{
return n.substr(0, t) + f.substr(0, i) + n.substr(t + 1, n.length)
}
for (var o=t(n), u="\t", f="", r=0; r < 50; r++)
f += "                    ";
return s(n, function(n)
{
var t,
r;
if (n.indexOf(u) == -1)
return n;
for (t = 0; (t = n.indexOf(u)) != -1; )
r = i - t % i,
n = e(n, t, r);
return n
})
}
function st(t)
{
var i=/<br\s*\/?>|&lt;br\s*\/?&gt;/gi;
return n.config.bloggerMode == !0 && (t = t.replace(i, "\n")), n.config.stripBrs == !0 && (t = t.replace(i, "")), t
}
function f(n)
{
return n.replace(/^\s+|\s+$/g, "")
}
function ht(n)
{
for (var r=t(st(n)), u=1e3, e, o, i=0; i < r.length && u > 0; i++)
if (e = r[i], f(e).length != 0)
{
if (o = /^\s*/.exec(e), o == null)
return n;
u = Math.min(o[0].length, u)
}
if (u > 0)
for (i = 0; i < r.length; i++)
r[i] = r[i].substr(u);
return r.join("\n")
}
function ct(n, t)
{
return n.index < t.index ? -1 : n.index > t.index ? 1 : n.length < t.length ? -1 : n.length > t.length ? 1 : 0
}
function e(t, i)
{
function e(n)
{
return n[0]
}
var r=null,
f=[],
o=i.func ? i.func : e,
u;
for (pos = 0; (r = XRegExp.exec(t, i.regex, pos)) != null; )
u = o(r, i),
typeof u == "string" && (u = [new n.Match(u, r.index, i.css)]),
f = f.concat(u),
pos = r.index + r[0].length;
return f
}
function lt(t)
{
var i=/(.*)((&gt;|&lt;).*)/;
return t.replace(n.regexLib.url, function(n)
{
var r="",
t=null;
return (t = i.exec(n)) && (n = t[1], r = t[2]), '<a href="' + n + '">' + n + "<\/a>" + r
})
}
function at()
{
for (var t=document.getElementsByTagName("script"), i=[], n=0; n < t.length; n++)
t[n].type == "syntaxhighlighter" && i.push(t[n]);
return i
}
function vt(n)
{
var u="<![CDATA[",
e="]\]>",
t=f(n),
i=!1,
s=u.length,
o=e.length,
r;
return t.indexOf(u) == 0 && (t = t.substring(s), i = !0), r = t.length, t.indexOf(e) == r - o && (t = t.substring(0, r - o), i = !0), i ? t : n
}
function yt(n)
{
var l=n.target,
e=o(l, ".syntaxhighlighter"),
s=o(l, ".container"),
t=document.createElement("textarea"),
v,
h,
r,
f;
if (s && e && !i(s, "textarea"))
{
for (v = a(e.id), b(e, "source"), h = s.childNodes, r = [], f = 0; f < h.length; f++)
r.push(h[f].innerText || h[f].textContent);
r = r.join("\r"),
r = r.replace(/\u00a0/g, " "),
t.appendChild(document.createTextNode(r)),
s.appendChild(t),
t.focus(),
t.select(),
u(t, "blur", function()
{
t.parentNode.removeChild(t),
c(e, "source")
})
}
}
typeof require != "undefined" && typeof XRegExp == "undefined" && (XRegExp = require("xregexp").XRegExp);
var n={
defaults: {
"class-name": "", "first-line": 1, "pad-line-numbers": !1, highlight: null, title: null, "smart-tabs": !0, "tab-size": 4, gutter: !0, toolbar: !0, "quick-code": !0, collapse: !1, "auto-links": !0, light: !1, unindent: !0, "html-script": !1
}, config: {
space: "&nbsp;", useScriptTags: !0, bloggerMode: !1, stripBrs: !1, tagName: "pre", strings: {
expandSource: "expand source", help: "?", alert: "SyntaxHighlighter\n\n", noBrush: "Can't find brush for: ", brushNotHtmlScript: "Brush wasn't configured for html-script option: ", aboutDialog: "@ABOUT@"
}
}, vars: {
discoveredBrushes: null, highlighters: {}
}, brushes: {}, regexLib: {
multiLineCComments: XRegExp("/\\*.*?\\*/", "gs"), singleLineCComments: /\/\/.*$/gm, singleLinePerlComments: /#.*$/gm, doubleQuotedString: /"([^\\"\n]|\\.)*"/g, singleQuotedString: /'([^\\'\n]|\\.)*'/g, multiLineDoubleQuotedString: XRegExp('"([^\\\\"]|\\\\.)*"', "gs"), multiLineSingleQuotedString: XRegExp("'([^\\\\']|\\\\.)*'", "gs"), xmlComments: XRegExp("(&lt;|<)!--.*?--(&gt;|>)", "gs"), url: /\w+:\/\/[\w-.\/?%&=:@;#]*/g, phpScriptTags: {
left: /(&lt;|<)\?(?:=|php)?/g, right: /\?(&gt;|>)/g, eof: !0
}, aspScriptTags: {
left: /(&lt;|<)%=?/g, right: /%(&gt;|>)/g
}, scriptScriptTags: {
left: /(&lt;|<)\s*script.*?(&gt;|>)/gi, right: /(&lt;|<)\/\s*script\s*(&gt;|>)/gi
}
}, toolbar: {
getHtml: function(t)
{
function e(t, i)
{
return n.toolbar.getButtonHtml(t, i, n.config.strings[i])
}
for (var u='<div class="toolbar">', f=n.toolbar.items, r=f.list, i=0; i < r.length; i++)
u += (f[r[i]].getHtml || e)(t, r[i]);
return u + "<\/div>"
}, getButtonHtml: function(n, t, i)
{
return '<span><a href="#" class="toolbar_item command_' + t + " " + t + '">' + i + "<\/a><\/span>"
}, handler: function(t)
{
function e(n)
{
var i=new RegExp(n + "_(\\w+)"),
t=i.exec(f);
return t ? t[1] : null
}
var i=t.target,
f=i.className || "",
r=a(o(i, ".syntaxhighlighter").id),
u=e("command");
r && u && n.toolbar.items[u].execute(r),
t.preventDefault()
}, items: {
list: ["expandSource", "help"], expandSource: {
getHtml: function(t)
{
if (t.getParam("collapse") != !0)
return "";
var i=t.getParam("title");
return n.toolbar.getButtonHtml(t, "expandSource", i ? i : n.config.strings.expandSource)
}, execute: function(n)
{
var t=k(n.id);
c(t, "collapsed")
}
}, help: {execute: function()
{
var t=it("", "_blank", 500, 250, "scrollbars=0"),
i=t.document;
i.write(n.config.strings.aboutDialog),
i.close(),
t.focus()
}}
}
}, findElements: function(t, i)
{
var r=i ? i instanceof Object ? l(i) : [i] : l(document.getElementsByTagName(n.config.tagName)),
o=n.config,
f=[],
u,
e;
if (o.useScriptTags && (r = r.concat(at())), r.length === 0)
return f;
for (u = 0; u < r.length; u++)
(e = {
target: r[u], params: v(t, ut(r[u].className))
}, e.params.brush != null) && f.push(e);
return f
}, highlight: function(t, i)
{
var h=this.findElements(t, i),
e=null,
l=n.config,
o,
c;
if (h.length !== 0)
for (o = 0; o < h.length; o++)
{
var i=h[o],
r=i.target,
u=i.params,
f=u.brush,
s;
if (f != null)
{
if (u["html-script"] == "true" || n.defaults["html-script"] == !0)
e = new n.HtmlScript(f),
f = "htmlscript";
else if (c = p(f), c)
e = new c;
else
continue;
s = r["innerHTML"],
l.useScriptTags && (s = vt(s)),
(r.title || "") != "" && (u.title = r.title),
u.brush = f,
e.init(u),
i = e.getDiv(s),
(r.id || "") != "" && (i.id = r.id),
r.parentNode.replaceChild(i, r)
}
}
}, all: function(t)
{
u(window, "load", function()
{
n.highlight(t)
})
}
};
return n.Match = function(n, t, i)
{
this.value = n,
this.index = t,
this.length = n.length,
this.css = i,
this.brushName = null
}, n.Match.prototype.toString = function()
{
return this.value
}, n.HtmlScript = function(t)
{
function o(n, t)
{
for (var i=0; i < n.length; i++)
n[i].index += t
}
function c(n)
{
for (var l=n.code, t=[], c=i.regexList, a=n.index + n.left.length, f=i.htmlScript, r, h, s=0; s < c.length; s++)
r = e(l, c[s]),
o(r, a),
t = t.concat(r);
for (f.left != null && n.left != null && (r = e(n.left, f.left), o(r, n.index), t = t.concat(r)), f.right != null && n.right != null && (r = e(n.right, f.right), o(r, n.index + n[0].lastIndexOf(n.right)), t = t.concat(r)), h = 0; h < t.length; h++)
t[h].brushName = u.brushName;
return t
}
var u=p(t),
i,
f=new n.brushes.Xml,
h=this,
s="getDiv getHtml init".split(" "),
r;
if (u != null)
{
for (i = new u, r = 0; r < s.length; r++)
(function()
{
var n=s[r];
h[n] = function()
{
return f[n].apply(f, arguments)
}
})();
if (i.htmlScript == null)
{
y(n.config.strings.brushNotHtmlScript + t);
return
}
f.regexList.push({
regex: i.htmlScript.code, func: c
})
}
}, n.Highlighter = function(){}, n.Highlighter.prototype = {
getParam: function(n, t)
{
var i=this.params[n];
return tt(i == null ? t : i)
}, create: function(n)
{
return document.createElement(n)
}, findMatches: function(n, t)
{
var r=[],
i;
if (n != null)
for (i = 0; i < n.length; i++)
typeof n[i] == "object" && (r = r.concat(e(t, n[i])));
return this.removeNestedMatches(r.sort(ct))
}, removeNestedMatches: function(n)
{
for (var r, f, u, i, t=0; t < n.length; t++)
if (n[t] !== null)
for (r = n[t], f = r.index + r.length, u = t + 1; u < n.length && n[t] !== null; u++)
if (i = n[u], i === null)
continue;
else if (i.index > f)
break;
else
i.index == r.index && i.length > r.length ? n[t] = null : i.index >= r.index && i.index < f && (n[u] = null);
return n
}, figureOutLineNumbers: function(n)
{
var t=[],
i=parseInt(this.getParam("first-line"));
return s(n, function(n, r)
{
t.push(r + i)
}), t
}, isLineHighlighted: function(n)
{
var t=this.getParam("highlight", []);
return typeof t != "object" && t.push == null && (t = [t]), g(t, n.toString()) != -1
}, getLineHtml: function(n, t, i)
{
var r=["line", "number" + t, "index" + n, "alt" + (t % 2 == 0 ? 1 : 2).toString()];
return this.isLineHighlighted(t) && r.push("highlighted"), t == 0 && r.push("break"), '<div class="' + r.join(" ") + '">' + i + "<\/div>"
}, getLineNumbersHtml: function(i, r)
{
var o="",
s=t(i).length,
h=parseInt(this.getParam("first-line")),
f=this.getParam("pad-line-numbers"),
u,
e,
i;
for (f == !0 ? f = (h + s - 1).toString().length : isNaN(f) == !0 && (f = 0), u = 0; u < s; u++)
e = r ? r[u] : h + u,
i = e == 0 ? n.config.space : ft(e, f),
o += this.getLineHtml(u, e, i);
return o
}, getCodeLinesHtml: function(i, r)
{
var e;
i = f(i);
var s=t(i),
v=this.getParam("pad-line-numbers"),
c=parseInt(this.getParam("first-line")),
i="",
l=this.getParam("brush");
for (e = 0; e < s.length; e++)
{
var u=s[e],
h=/^(&nbsp;|\s)+/.exec(u),
o=null,
a=r ? r[e] : c + e;
h != null && (o = h[0].toString(), u = u.substr(o.length), o = o.replace(" ", n.config.space)),
u = f(u),
u.length == 0 && (u = n.config.space),
i += this.getLineHtml(e, a, (o != null ? '<code class="' + l + ' spaces">' + o + "<\/code>" : "") + u)
}
return i
}, getTitleHtml: function(n)
{
return n ? "<caption>" + n + "<\/caption>" : ""
}, getMatchesHtml: function(n, t)
{
function s(n)
{
var t=n ? n.brushName || o : o;
return t ? t + " " : ""
}
for (var r=0, e="", o=this.getParam("brush", ""), i, f, u=0; u < t.length; u++)
(i = t[u], i !== null && i.length !== 0) && (f = s(i), e += h(n.substr(r, i.index - r), f + "plain") + h(i.value, f + i.css), r = i.index + i.length + (i.offset || 0));
return e + h(n.substr(r), s() + "plain")
}, getHtml: function(t)
{
var i="",
u=["syntaxhighlighter"],
f,
e,
o;
return this.getParam("light") == !0 && (this.params.toolbar = this.params.gutter = !1), className = "syntaxhighlighter", this.getParam("collapse") == !0 && u.push("collapsed"), (gutter = this.getParam("gutter")) == !1 && u.push("nogutter"), u.push(this.getParam("class-name")), u.push(this.getParam("brush")), t = rt(t).replace(/\r/g, " "), f = this.getParam("tab-size"), t = this.getParam("smart-tabs") == !0 ? ot(t, f) : et(t, f), this.getParam("unindent") && (t = ht(t)), gutter && (o = this.figureOutLineNumbers(t)), e = this.findMatches(this.regexList, t), i = this.getMatchesHtml(t, e), i = this.getCodeLinesHtml(i, o), this.getParam("auto-links") && (i = lt(i)), typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.match(/MSIE/) && u.push("ie"), '<div id="' + r(this.id) + '" class="' + u.join(" ") + '">' + (this.getParam("toolbar") ? n.toolbar.getHtml(this) : "") + '<table border="0" cellpadding="0" cellspacing="0">' + this.getTitleHtml(this.getParam("title")) + "<tbody><tr>" + (gutter ? '<td class="gutter">' + this.getLineNumbersHtml(t) + "<\/td>" : "") + '<td class="code"><div class="container">' + i + "<\/div><\/td><\/tr><\/tbody><\/table><\/div>"
}, getDiv: function(t)
{
t === null && (t = ""),
this.code = t;
var r=this.create("div");
return r.innerHTML = this.getHtml(t), this.getParam("toolbar") && u(i(r, ".toolbar"), "click", n.toolbar.handler), this.getParam("quick-code") && u(i(r, ".code"), "dblclick", yt), r
}, init: function(t)
{
this.id = nt(),
d(this),
this.params = v(n.defaults, t || {}),
this.getParam("light") == !0 && (this.params.toolbar = this.params.gutter = !1)
}, getKeywords: function(n)
{
return n = n.replace(/^\s+|\s+$/g, "").replace(/\s+/g, "|"), "\\b(?:" + n + ")\\b"
}, forHtmlScript: function(n)
{
var t={end: n.right.source};
n.eof && (t.end = "(?:(?:" + t.end + ")|$)"),
this.htmlScript = {
left: {
regex: n.left, css: "script"
}, right: {
regex: n.right, css: "script"
}, code: XRegExp("(?<left>" + n.left.source + ")(?<code>.*?)(?<right>" + t.end + ")", "sgi")
}
}
}, n
}();
typeof exports != "undefined" ? exports.SyntaxHighlighter = SyntaxHighlighter : null;
/**
* SyntaxHighlighter
* http://alexgorbatchev.com/SyntaxHighlighter
*
* SyntaxHighlighter is donationware. If you are using it, please donate.
* http://alexgorbatchev.com/SyntaxHighlighter/donate.html
*
* @version
* 3.0.83 (July 02 2010)
* 
* @copyright
* Copyright (C) 2004-2010 Alex Gorbatchev.
*
* @license
* Dual licensed under the MIT and GPL licenses.
*/
(function()
{
function n()
{
function n(n)
{
var t=n[0].indexOf("///") == 0 ? "color1" : "comments";
return [new SyntaxHighlighter.Match(n[0], n.index, t)]
}
this.regexList = [{
regex: SyntaxHighlighter.regexLib.singleLineCComments, func: n
}, {
regex: SyntaxHighlighter.regexLib.multiLineCComments, css: "comments"
}, {
regex: /@"(?:[^"]|"")*"/g, css: "string"
}, {
regex: SyntaxHighlighter.regexLib.doubleQuotedString, css: "string"
}, {
regex: SyntaxHighlighter.regexLib.singleQuotedString, css: "string"
}, {
regex: /^\s*#.*/gm, css: "preprocessor"
}, {
regex: new RegExp(this.getKeywords("abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach get goto if implicit in int interface internal is lock long namespace new null object operator out override params private protected public readonly ref return sbyte sealed set short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual void while"), "gm"), css: "keyword"
}, {
regex: /\bpartial(?=\s+(?:class|interface|struct)\b)/g, css: "keyword"
}, {
regex: /\byield(?=\s+(?:return|break)\b)/g, css: "keyword"
}],
this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags)
}
typeof require != "undefined" ? SyntaxHighlighter = require("shCore").SyntaxHighlighter : null,
n.prototype = new SyntaxHighlighter.Highlighter,
n.aliases = ["c#", "c-sharp", "csharp"],
SyntaxHighlighter.brushes.CSharp = n,
typeof exports != "undefined" ? exports.Brush = n : null
})();